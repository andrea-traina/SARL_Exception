package it.unito.di.sarlexceptions.examples.treatment

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.OpenEventSpace
import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import it.unito.di.sarlexceptions.events.ExceptionSpaceCreated
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import it.unito.di.sarlexceptions.spaces.ExceptionSpaceSpecification
import java.util.UUID
import io.sarl.api.core.Logging
import java.util.ArrayList

agent Doctor {
	
	uses DefaultContextInteractions, Logging, Behaviors, Lifecycle 
	
	var docSpace : OpenEventSpace
	
	var Rx : String
	
	var Claim = new ArrayList<String>() 
	
	var Limitation : Boolean

	var exSpaceDoctor : ExceptionSpace<Continue>

	var exSpaceDoctorRemind : ExceptionSpace<Remind>

	
	on Initialize {
		docSpace = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification),
			occurrence.parameters.get(0) as UUID)
	
		docSpace.registerStrongParticipant(asEventListener())

		Rx = occurrence.parameters.get(1) as String
		
		Limitation = false
		
		val type = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<Continue>>
		exSpaceDoctor = defaultContext.getOrCreateSpaceWithID(type, UUID::randomUUID)
		exSpaceDoctor.registerAsRaiser(asEventListener)
		info("Doctor, Registered as raiser for Continue")
		emit(new ExceptionSpaceCreated(Continue, exSpaceDoctor.spaceID.ID))

	}

	on Complaint {
		Claim = occurrence.index
		Claim.add(Rx)
		var Easy = false
		if(Easy){
			emit(new Reassurance(Claim))[it == occurrence.source]
			info("il Dottore invia una rassicurazione al paziente")
			killMe
			}
		else {
			info("il Dottore invia la prescrizione alla farmacia")
			emit(new Prescription(null))
			
			info("Dottore invia informazioni al paziente per mantenerlo aggiornato")
			emit(new Checkpoint(Claim))
		}
	}

	on ExceptionSpaceCreated [occurrence.ex == Remind] {
		exSpaceDoctorRemind = defaultContext.getSpace(occurrence.id)
		exSpaceDoctorRemind.registerAsHandler(asEventListener)
		info("Doctor, Registered as handler for Remind")
	}
	on Remind {
		if(!Limitation) {
			Limitation = true
			info("invio nuovamente la prescrizione")
			emit(new Prescription(null))
		}
		else {
			info("Dottore, impossibile contattare la Farmacia")
			exSpaceDoctor.raiseException(new Continue(null), ID)
			killMe
		}

	}
	
	on FilledRx {
		killMe
	}
}
	