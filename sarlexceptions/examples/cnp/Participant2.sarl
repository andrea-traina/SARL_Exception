package newcnp

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.OpenEventSpace
import io.sarl.api.core.OpenEventSpaceSpecification
import it.unito.di.sarlexceptions.events.ExceptionSpaceCreated
import it.unito.di.sarlexceptions.spaces.ExceptionSpace
import it.unito.di.sarlexceptions.spaces.ExceptionSpaceSpecification
import java.util.UUID

agent Participant2 {

	uses DefaultContextInteractions, Behaviors, Logging, ExternalContextAccess, Lifecycle

	var comSpace : OpenEventSpace

	var MIN_VALUE : Integer

	var TIME : Integer

	var exSpaceFail : ExceptionSpace<NotCompleted>
	var exSpaceNoOffers : ExceptionSpace<NoOffers>
	var exSpaceTie : ExceptionSpace<Tie>
	

	on Initialize {
		comSpace = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification),
			occurrence.parameters.get(0) as UUID)
		comSpace.registerStrongParticipant(asEventListener())
		MIN_VALUE = occurrence.parameters.get(1) as Integer
		TIME = occurrence.parameters.get(2) as Integer

		val type = new ExceptionSpaceSpecification.class as Class<ExceptionSpaceSpecification<NotCompleted>>
		exSpaceFail = defaultContext.getOrCreateSpaceWithID(type, UUID::randomUUID)
		exSpaceFail.registerAsRaiser(asEventListener)
		info("[Participant2] Registered as raiser for NotCompleted!")
		emit(new ExceptionSpaceCreated(NotCompleted, exSpaceFail.spaceID.ID))
	}

	on Cfp {
		info("Participant2: Richiesta ricevuta")
		if (occurrence.index > MIN_VALUE) {
			info("Participant2: Invio proposta")
			comSpace.emit(new Propose(TIME))[it == occurrence.source]
		} else {
			info("Participant2: Richiesta rifiutata")
			comSpace.emit(new Propose(-1))[it == occurrence.source]
		
		}
	}

	on Reject_Acept_Proposal {
		if (occurrence.index > 0) {
			info("Participant2: Errore, incarico non portato a termine")
			exSpaceFail.raiseException(new NotCompleted(null), ID)
		} else {
			info("Participant2: esce")
			killMe
		}
	}

	on ExceptionSpaceCreated [occurrence.ex == NoOffers] {
		exSpaceNoOffers = defaultContext.getSpace(occurrence.id)
		exSpaceNoOffers.registerAsHandler(asEventListener)
		info("[Participant2] Registered as handler for NoOffers!")
	}
	on NoOffers{
		info("Participant2: invio nuova offerta")
		comSpace.emit(new NewOffer(TIME))
	}

	on NoHandler {
		killMe
	}


	on Dismiss {
		killMe
	}
}
